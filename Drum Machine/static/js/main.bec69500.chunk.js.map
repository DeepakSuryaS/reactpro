{"version":3,"sources":["keyData.js","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["id","letter","src","DrumPad","props","play","audio","currentTime","handleDisplay","handleKeydown","e","target","querySelector","keyCode","charCodeAt","useEffect","window","focus","addEventListener","removeEventListener","className","onClick","App","useState","display","setDisplay","displayText","keyData","map","data","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAAe,G,MAAA,CACb,CAAEA,GAAI,QAASC,OAAQ,IAAKC,IAAK,qDACjC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,yDAClC,CAAEF,GAAI,QAASC,OAAQ,IAAKC,IAAK,mDACjC,CAAEF,GAAI,UAAWC,OAAQ,IAAKC,IAAK,0DACnC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,iDAClC,CAAEF,GAAI,UAAWC,OAAQ,IAAKC,IAAK,2DACnC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,iDACpC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,yDACpC,CAAEF,GAAI,QAASC,OAAQ,IAAKC,IAAK,kECsCpBC,MA7Cf,SAAiBC,GAEf,IAAMC,EAAO,SAACC,GACZA,EAAMD,OACNC,EAAMC,YAAc,EACpBH,EAAMI,cAAcJ,EAAMJ,KAS5B,SAASS,EAAeC,GACtB,IAAIJ,EAAQI,EAAEC,OAAOC,cAAc,SAChCF,EAAEG,UAAYT,EAAMH,OAAOa,cAC1BT,EAAKC,GAYX,OARAS,qBAAU,WAGR,OAFAC,OAAOC,QACPD,OAAOE,iBAAiB,UAAWT,GAC5B,WACLO,OAAOG,oBAAoB,UAAWV,MAEvC,IAGD,yBACEW,UAAY,WACZC,QAxBgB,SAACX,GACnB,IAAIJ,EAAQI,EAAEC,OAAOC,cAAc,SAChCN,EAAOD,EAAKC,GACVF,EAAMI,cAAc,2BAsBvBR,GAAMI,EAAMJ,IAEZ,4BAAKI,EAAMH,QACX,2BACEmB,UAAY,OACZpB,GAAMI,EAAMH,OACZC,IAAOE,EAAMF,QCZNoB,MAvBf,WAAgB,IAAD,EAEiBC,mBAAS,wBAF1B,mBAENC,EAFM,KAEGC,EAFH,KAGPjB,EAAgB,SAAAkB,GAAW,OAAID,EAAWC,IAEhD,OACE,yBAAK1B,GAAG,gBACN,yBAAKA,GAAG,WAAWwB,GACnB,yBAAKxB,GAAG,aACL2B,EAAQC,KAAI,SAAAC,GAAI,OACf,kBAAC,EAAD,CACEC,IAAOD,EAAK7B,GACZA,GAAM6B,EAAK7B,GACXC,OAAU4B,EAAK5B,OACfC,IAAO2B,EAAK3B,IACZM,cAAiBA,UCTTuB,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bec69500.chunk.js","sourcesContent":["export default [\n  { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\n  { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\n  { id: 'bongo', letter: 'E', src: 'http://tipiwiki.free.fr/snd/Percussion(4e)2.wav' },\n  { id: 'tom tom', letter: 'A', src: 'http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav' },\n  { id: 'bass 3', letter: 'S', src: 'http://billor.chsh.chc.edu.tw/sound/bass4.wav' },\n  { id: 'shotgun', letter: 'D', src: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav' },\n  { id: 'high hat', letter: 'Z', src: 'http://www.denhaku.com/r_box/tr707/closed.wav' },\n  { id: 'drum hit', letter: 'X', src: 'http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3' },\n  { id: 'laser', letter: 'C', src: 'http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav'  },\n]\n","import React, {useEffect} from \"react\"\n\nfunction DrumPad(props) {\n\n  const play = (audio) => {\n    audio.play()\n    audio.currentTime = 0\n    props.handleDisplay(props.id)\n  }\n\n  const handleClick = (e) => {\n    let audio = e.target.querySelector('audio')\n    if(audio) play(audio)\n    else props.handleDisplay(\"Don't click the letter\")\n  }\n  \n  function handleKeydown (e) {\n    let audio = e.target.querySelector('audio')\n    if(e.keyCode === props.letter.charCodeAt()) {\n        play(audio)\n      }\n  }\n  \n  useEffect(() => {\n    window.focus()\n    window.addEventListener('keydown', handleKeydown)\n    return () => {\n      window.removeEventListener('keydown', handleKeydown)\n    }\n  }, [])\n\n  return (\n    <div\n      className = \"drum-pad\"\n      onClick = {handleClick}\n      id = {props.id}\n    >\n      <h1>{props.letter}</h1>\n      <audio\n        className = \"clip\"\n        id = {props.letter}\n        src = {props.src}\n      />\n    </div>\n  );\n}\n\nexport default DrumPad","import React, {useState} from 'react';\n\nimport './App.css';\nimport keyData from \"./keyData\"\nimport DrumPad from \"./DrumPad\"\n\nfunction App() {\n  \n  const [display, setDisplay] = useState('Click or press a key');\n  const handleDisplay = displayText => setDisplay(displayText);\n\n  return (\n    <div id=\"drum-machine\">\n      <div id=\"display\">{display}</div>\n      <div id=\"drum-pads\">\n        {keyData.map(data => (\n          <DrumPad \n            key = {data.id}\n            id = {data.id}\n            letter = {data.letter}\n            src = {data.src}\n            handleDisplay = {handleDisplay}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}